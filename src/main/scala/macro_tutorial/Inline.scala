package macro_tutorial

object Inline:
  inline val pi = 3.141592653589793
  inline val pie = "ü•ß"

  // inlineÂåñ„Åï„Çå„Åü„ÅÇ„Å®„Å´ÂÆöÊï∞Áï≥„ÅøËæº„Åø(constant folding)„Å®„ÅÑ„ÅÜÊúÄÈÅ©Âåñ„ÅåËµ∞„Å£„Å¶„Ç≥„É≥„Éë„Ç§„É´ÊôÇ„Å´Ë©ï‰æ°„Åï„Çå„Çã
  val pi2 = pi + pi // val pi2 = 6.283185307179586
  val pie2 = pie + pie // val pie2 = "ü•ßü•ß"

  val pix = 3.141592653589793
  // inline val pix2 = pix + pix // inline value must have a literal constant type

  inline def logged[T](level: Int, message: => String)(inline op: T): T =
    println(s"[$level]Computing $message")
    val res = op
    println(s"[$level]Result of $message: $res")
    res

//  logged(logLevel, getMessage()) {
//    computeSomething()
//  }
//  „Åå„Çà„Å∞„Çå„Çã„Å®
//  val level   = logLevel
//  def message = getMessage() <- by-name„Éë„É©„É°„Éº„Çø„Å†„Å®def„Å´„Å™„Çã
//
//  println(s"[$level]Computing $message")
//  val res = computeSomething() <- inline„Éë„É©„É°„Éº„Çø„Å™„ÅÆ„ÅßinlineÂåñ„Åï„Çå„Çã„ÄÇÔºàby-value„Å†„Å®ÂÖàÈ†≠„ÅßvalÂÆöÁæ©„Åï„Çå„Å¶„Åó„Åæ„ÅÜ„ÅÆ„Åßprintln„ÅÆÂâç„Å´ÂÆüË°å„Åï„Çå„Å¶„Åó„Åæ„ÅÜ
//  println(s"[$level]Result of $message: $res")
//  res
// „Å´Â±ïÈñã„Åï„Çå„Çã

  class Logger:
    def log(x: Any): Unit = println(x)

  class RefinedLogger extends Logger:
    override def log(x: Any): Unit = println("Any: " + x)
    def log(x: String): Unit = println("String: " + x)

  inline def logged[T](logger: Logger, x: T): Unit =
    logger.log(x)

  // logged(new RefinedLogger, "foo") „ÇíinlineÂåñ„Åô„Çã„Å®
  // val logger = new RefinedLogger
  // val x = "foo"
  // logger.log(x)
  // „Å™„ÅÆ„Åßlog(x: String)„ÅÆ„Åª„ÅÜ„ÅåÂëº„Å≥Âá∫„Åï„Çå„Åù„ÅÜ„Å†„Åå„ÄÅinlineÂâçÂæå„Åßsemantics„ÇíÂ§â„Åà„Å¶„ÅØË°å„Åë„Å™„ÅÑ„Å®„ÅÑ„ÅÜ„É´„Éº„É´„Åå„ÅÇ„Çã„ÅÆ„Åß
  // logged[T]„Åã„ÇâÂëº„Åπ„Çãlogger.log„Åß„ÅÇ„Çãlog(x: Any)„ÅÆÊñπ„ÅåÂëº„Å∞„Çå„Çã
